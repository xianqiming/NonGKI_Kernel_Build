diff --git a/../evox_a15_mix2s_bak/drivers/android/binder.c b/./drivers/android/binder.c
index 1349fc544..156e98a29 100644
--- a/../evox_a15_mix2s_bak/drivers/android/binder.c
+++ b/./drivers/android/binder.c
@@ -70,6 +70,7 @@
 #include <linux/pid_namespace.h>
 #include <linux/security.h>
 #include <linux/spinlock.h>
+#include <linux/rekernel.h>
 #include "binder_alloc.h"
 #include "binder_trace.h"
 
@@ -3114,6 +3115,18 @@ static void binder_transaction(struct binder_proc *proc,
 		target_proc = target_thread->proc;
 		atomic_inc(&target_proc->tmp_ref);
 		binder_inner_proc_unlock(target_thread->proc);
+   		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val <= MAX_SYSTEM_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=reply,oneway=0,from_pid=%d,from=%d,target_pid=%d,target=%d;", proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+   		}
 	} else {
 		if (tr->target.handle) {
 			struct binder_ref *ref;
@@ -3166,6 +3179,18 @@ static void binder_transaction(struct binder_proc *proc,
 			goto err_dead_binder;
 		}
 		e->to_node = target_node->debug_id;
+   		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val > MIN_USERAPP_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=transaction,oneway=%d,from_pid=%d,from=%d,target_pid=%d,target=%d;", tr->flags & TF_ONE_WAY, proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+   		}
 		if (WARN_ON(proc == target_proc)) {
 			return_error = BR_FAILED_REPLY;
 			return_error_param = -EINVAL;
diff --git a/../evox_a15_mix2s_bak/drivers/android/binder_alloc.c b/./drivers/android/binder_alloc.c
index 5addcd56a..a191ee637 100644
--- a/../evox_a15_mix2s_bak/drivers/android/binder_alloc.c
+++ b/./drivers/android/binder_alloc.c
@@ -30,6 +30,7 @@
 #include <linux/list_lru.h>
 #include <linux/uaccess.h>
 #include <linux/highmem.h>
+#include <linux/rekernel.h>
 #include "binder_alloc.h"
 #include "binder_trace.h"
 
@@ -364,6 +365,7 @@ static struct binder_buffer *binder_alloc_new_buf_locked(
 				int is_async,
 				int pid)
 {
+	struct task_struct *proc_task = NULL;
 	struct rb_node *n = alloc->free_buffers.rb_node;
 	struct binder_buffer *buffer;
 	size_t buffer_size;
@@ -395,6 +397,20 @@ static struct binder_buffer *binder_alloc_new_buf_locked(
 				alloc->pid, extra_buffers_size);
 		return ERR_PTR(-EINVAL);
 	}
+	if (is_async
+		&& (alloc->free_async_space < 3 * (size + sizeof(struct binder_buffer))
+		|| (alloc->free_async_space < WARN_AHEAD_SPACE))) {
+		rcu_read_lock();
+		proc_task = find_task_by_vpid(alloc->pid);
+		rcu_read_unlock();
+		if (proc_task != NULL && start_rekernel_server() == 0) {
+			if (line_is_frozen(proc_task)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=free_buffer_full,oneway=1,from_pid=%d,from=%d,target_pid=%d,target=%d;", current->pid, task_uid(current).val, proc_task->pid, task_uid(proc_task).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+		}
+	}
 	if (is_async &&
 	    alloc->free_async_space < size + sizeof(struct binder_buffer)) {
 		binder_alloc_debug(BINDER_DEBUG_BUFFER_ALLOC,
diff --git a/./include/linux/rekernel.h b/./include/linux/rekernel.h
new file mode 100644
index 000000000..5774cbdf7
--- /dev/null
+++ b/./include/linux/rekernel.h
@@ -0,0 +1,99 @@
+#include <linux/init.h>
+#include <linux/types.h>
+#include <net/sock.h>
+#include <linux/netlink.h>
+#include <linux/proc_fs.h>
+#include <linux/freezer.h>
+
+#define NETLINK_REKERNEL_MAX     		26
+#define NETLINK_REKERNEL_MIN     		22
+#define USER_PORT        			100
+#define PACKET_SIZE 				128
+#define MIN_USERAPP_UID 			(10000)
+#define MAX_SYSTEM_UID  			(2000)
+#define RESERVE_ORDER				17
+#define WARN_AHEAD_SPACE			(1 << RESERVE_ORDER)
+
+static struct sock *rekernel_netlink = NULL;
+extern struct net init_net;
+static int netlink_unit = NETLINK_REKERNEL_MIN;
+
+static inline bool line_is_frozen(struct task_struct *task)
+{
+    return frozen(task->group_leader) || freezing(task->group_leader);
+}
+
+static int send_netlink_message(char *msg, uint16_t len) {
+    struct sk_buff *skbuffer;
+    struct nlmsghdr *nlhdr;
+
+    skbuffer = nlmsg_new(len, GFP_ATOMIC);
+    if (!skbuffer) {
+        printk("netlink alloc failure.\n");
+        return -1;
+    }
+
+    nlhdr = nlmsg_put(skbuffer, 0, 0, netlink_unit, len, 0);
+    if (!nlhdr) {
+        printk("nlmsg_put failaure.\n");
+        nlmsg_free(skbuffer);
+        return -1;
+    }
+
+    memcpy(nlmsg_data(nlhdr), msg, len);
+    return netlink_unicast(rekernel_netlink, skbuffer, USER_PORT, MSG_DONTWAIT);
+}
+
+static void netlink_rcv_msg(struct sk_buff *skbuffer) { // Ignore recv msg.
+}
+
+static struct netlink_kernel_cfg rekernel_cfg = { 
+    .input = netlink_rcv_msg,
+};
+
+static int rekernel_unit_show(struct seq_file *m, void *v)
+{
+	seq_printf(m, "%d\n", netlink_unit);
+	return 0;
+}
+
+static int rekernel_unit_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, rekernel_unit_show, NULL);
+}
+
+static const struct file_operations rekernel_unit_fops = {
+	.open   = rekernel_unit_open,
+	.read   = seq_read,
+	.llseek   = seq_lseek,
+	.release   = single_release,
+	.owner   = THIS_MODULE,
+};
+
+static struct proc_dir_entry *rekernel_dir, *rekernel_unit_entry;
+
+static int start_rekernel_server(void) {
+  if (rekernel_netlink != NULL)
+    return 0;
+  for (netlink_unit = NETLINK_REKERNEL_MIN; netlink_unit < NETLINK_REKERNEL_MAX; netlink_unit++) {
+    rekernel_netlink = (struct sock *)netlink_kernel_create(&init_net, netlink_unit, &rekernel_cfg);
+    if (rekernel_netlink != NULL)
+      break;
+  }
+  if (rekernel_netlink == NULL) {
+    printk("Failed to create Re:Kernel server!\n");
+    return -1;
+  }
+  printk("Created Re:Kernel server! NETLINK UNIT: %d\n", netlink_unit);
+  rekernel_dir = proc_mkdir("rekernel", NULL);
+  if (!rekernel_dir)
+      printk("create /proc/rekernel failed!\n");
+  else {
+      char buff[32];
+      sprintf(buff, "%d", netlink_unit);
+      rekernel_unit_entry = proc_create(buff, 0644, rekernel_dir, &rekernel_unit_fops);
+      if (!rekernel_unit_entry)
+          printk("create rekernel unit failed!\n");
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/../evox_a15_mix2s_bak/kernel/signal.c b/./kernel/signal.c
index 3385d30a4..236714d5a 100644
--- a/../evox_a15_mix2s_bak/kernel/signal.c
+++ b/./kernel/signal.c
@@ -39,6 +39,7 @@
 #include <linux/cgroup.h>
 #include <linux/oom.h>
 #include <linux/capability.h>
+#include <linux/rekernel.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/signal.h>
@@ -1208,7 +1209,13 @@ int do_send_sig_info(int sig, struct siginfo *info, struct task_struct *p,
 {
 	unsigned long flags;
 	int ret = -ESRCH;
-
+	if (start_rekernel_server() == 0) {
+ 		if (line_is_frozen(current) && (sig == SIGKILL || sig == SIGTERM || sig == SIGABRT || sig == SIGQUIT)) {
+     			char binder_kmsg[PACKET_SIZE];
+			snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Signal,signal=%d,killer_pid=%d,killer=%d,dst_pid=%d,dst=%d;", sig, task_tgid_nr(p), task_uid(p).val, task_tgid_nr(current), task_uid(current).val);
+     			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+ 		}
+ 	}
 	if (lock_task_sighand(p, &flags)) {
 		ret = send_signal(sig, info, p, group);
 		unlock_task_sighand(p, &flags);
