diff --git a/drivers/android/binder.c b/drivers/android/binder.c
index 7716e214e..f9dafddf4 100644
--- a/drivers/android/binder.c
+++ b/drivers/android/binder.c
@@ -102,6 +102,8 @@ static const char *const binder_wait_on_str[] = {
 };
 #endif
 
+#include <linux/rekernel.h>
+
 static HLIST_HEAD(binder_deferred_list);
 static DEFINE_MUTEX(binder_deferred_lock);
 
@@ -3585,6 +3587,52 @@ static struct binder_node *binder_get_node_refs_for_txn(
 	return target_node;
 }
 
+static inline bool line_is_frozen(struct task_struct *task)
+{
+	return frozen(task) || freezing(task);
+}
+
+static int send_netlink_message(char *msg, uint16_t len) {
+	struct sk_buff *skbuffer;
+	struct nlmsghdr *nlhdr;
+
+	skbuffer = nlmsg_new(len, GFP_ATOMIC);
+	if (!skbuffer) {
+		printk("netlink alloc failure.\n");
+		return -1;
+	}
+
+	nlhdr = nlmsg_put(skbuffer, 0, 0, rekernel_netlink_unit, len, 0);
+	if (!nlhdr) {
+		printk("nlmsg_put failaure.\n");
+		nlmsg_free(skbuffer);
+		return -1;
+	}
+
+	memcpy(nlmsg_data(nlhdr), msg, len);
+	return netlink_unicast(rekernel_netlink, skbuffer, REKERNEL_USER_PORT, MSG_DONTWAIT);
+}
+
+static int start_rekernel_server(void) {
+	extern struct net init_net;
+	struct netlink_kernel_cfg rekernel_cfg = { 
+		.input = NULL,
+	};
+	if (rekernel_netlink != NULL)
+		return 0;
+	for (rekernel_netlink_unit = NETLINK_REKERNEL_MIN; rekernel_netlink_unit < NETLINK_REKERNEL_MAX; rekernel_netlink_unit++) {
+		rekernel_netlink = (struct sock *)netlink_kernel_create(&init_net, rekernel_netlink_unit, &rekernel_cfg);
+		if (rekernel_netlink != NULL)
+			break;
+	}
+	printk("Created Re:Kernel server! NETLINK UNIT: %d\n", rekernel_netlink_unit);
+	if (rekernel_netlink == NULL) {
+		printk("Failed to create Re:Kernel server!\n");
+		return -1;
+	}
+	return 0;
+}
+
 static void binder_transaction(struct binder_proc *proc,
 			       struct binder_thread *thread,
 			       struct binder_transaction_data *tr, int reply,
@@ -3704,6 +3752,18 @@ static void binder_transaction(struct binder_proc *proc,
 		target_proc = target_thread->proc;
 		target_proc->tmp_ref++;
 		binder_inner_proc_unlock(target_thread->proc);
+		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val <= REKERNEL_MAX_SYSTEM_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+				char binder_kmsg[REKERNEL_PACKET_SIZE];
+				snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=reply,oneway=0,from_pid=%d,from=%d,target_pid=%d,target=%d;", proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+				send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+		}
 #ifdef BINDER_WATCHDOG
 		e->service[0] = '\0';
 #endif
@@ -3759,6 +3819,18 @@ static void binder_transaction(struct binder_proc *proc,
 			goto err_dead_binder;
 		}
 		e->to_node = target_node->debug_id;
+		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val > REKERNEL_MIN_USERAPP_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+					char binder_kmsg[REKERNEL_PACKET_SIZE];
+					snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=transaction,oneway=%d,from_pid=%d,from=%d,target_pid=%d,target=%d;",  tr->flags & TF_ONE_WAY, proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+					send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+		}
 
 #ifdef BINDER_WATCHDOG
 		strncpy(e->service, target_node->name, MAX_SERVICE_NAME_LEN);
diff --git a/drivers/android/binder_alloc.c b/drivers/android/binder_alloc.c
index c50815684..264b2b8a3 100644
--- a/drivers/android/binder_alloc.c
+++ b/drivers/android/binder_alloc.c
@@ -33,6 +33,7 @@
 #include "binder_alloc.h"
 #include "binder_trace.h"
 
+#include <linux/rekernel.h>
 struct list_lru binder_alloc_lru;
 
 static DEFINE_MUTEX(binder_alloc_mmap_lock);
@@ -343,13 +344,60 @@ static inline struct vm_area_struct *binder_alloc_get_vma(
 	return vma;
 }
 
-static struct binder_buffer *binder_alloc_new_buf_locked(
+static static inline bool line_is_frozen(struct task_struct *task)
+{
+	return frozen(task) || freezing(task);
+}
+
+static int send_netlink_message(char *msg, uint16_t len) {
+	struct sk_buff *skbuffer;
+	struct nlmsghdr *nlhdr;
+
+	skbuffer = nlmsg_new(len, GFP_ATOMIC);
+	if (!skbuffer) {
+		printk("netlink alloc failure.\n");
+		return -1;
+	}
+
+	nlhdr = nlmsg_put(skbuffer, 0, 0, rekernel_netlink_unit, len, 0);
+	if (!nlhdr) {
+		printk("nlmsg_put failaure.\n");
+		nlmsg_free(skbuffer);
+		return -1;
+	}
+
+	memcpy(nlmsg_data(nlhdr), msg, len);
+	return netlink_unicast(rekernel_netlink, skbuffer, REKERNEL_USER_PORT, MSG_DONTWAIT);
+}
+
+static int start_rekernel_server(void) {
+	extern struct net init_net;
+	struct netlink_kernel_cfg rekernel_cfg = { 
+		.input = NULL,
+	};
+	if (rekernel_netlink != NULL)
+		return 0;
+	for (rekernel_netlink_unit = NETLINK_REKERNEL_MIN; rekernel_netlink_unit < NETLINK_REKERNEL_MAX; rekernel_netlink_unit++) {
+		rekernel_netlink = (struct sock *)netlink_kernel_create(&init_net, rekernel_netlink_unit, &rekernel_cfg);
+		if (rekernel_netlink != NULL)
+			break;
+	}
+	printk("Created Re:Kernel server! NETLINK UNIT: %d\n", rekernel_netlink_unit);
+	if (rekernel_netlink == NULL) {
+		printk("Failed to create Re:Kernel server!\n");
+		return -1;
+	}
+	return 0;
+}
+
+struct binder_buffer *binder_alloc_new_buf_locked(
 				struct binder_alloc *alloc,
 				size_t data_size,
 				size_t offsets_size,
 				size_t extra_buffers_size,
 				int is_async)
 {
+	struct task_struct *proc_task = NULL;
 	struct rb_node *n = alloc->free_buffers.rb_node;
 	struct binder_buffer *buffer;
 	size_t buffer_size;
@@ -381,6 +429,20 @@ static struct binder_buffer *binder_alloc_new_buf_locked(
 				alloc->pid, extra_buffers_size);
 		return ERR_PTR(-EINVAL);
 	}
+	if (is_async
+			&& (alloc->free_async_space < 3 * (size + sizeof(struct binder_buffer))
+			|| (alloc->free_async_space < REKERNEL_WARN_AHEAD_SPACE))) {
+		rcu_read_lock();
+		proc_task = find_task_by_vpid(alloc->pid);
+		rcu_read_unlock();
+		if (proc_task != NULL && start_rekernel_server() == 0) {
+			if (line_is_frozen(proc_task)) {
+				char binder_kmsg[REKERNEL_PACKET_SIZE];
+				snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=free_buffer_full,oneway=1,from_pid=%d,from=%d,target_pid=%d,target=%d;", current->pid, task_uid(current).val, proc_task->pid, task_uid(proc_task).val);
+				send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+		}
+	}
 	if (is_async &&
 	    alloc->free_async_space < size + sizeof(struct binder_buffer)) {
 		binder_alloc_debug(BINDER_DEBUG_BUFFER_ALLOC,
diff --git a/include/linux/rekernel.h b/include/linux/rekernel.h
new file mode 100644
index 000000000..6cb918e42
--- /dev/null
+++ b/include/linux/rekernel.h
@@ -0,0 +1,22 @@
+#ifndef REKERNEL_H
+#define REKERNEL_H
+
+#include <linux/netlink.h>
+#include <linux/freezer.h>
+#include <net/sock.h>
+#include <linux/proc_fs.h>
+#include <linux/sched.h>
+
+#define NETLINK_REKERNEL_MAX     		26
+#define NETLINK_REKERNEL_MIN     		22
+#define REKERNEL_USER_PORT        			    100
+#define REKERNEL_PACKET_SIZE 				    128
+#define REKERNEL_MIN_USERAPP_UID (10000)
+#define REKERNEL_MAX_SYSTEM_UID  (2000)
+#define REKERNEL_RESERVE_ORDER  17
+#define REKERNEL_WARN_AHEAD_SPACE  (1 << REKERNEL_RESERVE_ORDER)
+
+static struct sock *rekernel_netlink;
+static int rekernel_netlink_unit;
+
+#endif
diff --git a/kernel/signal.c b/kernel/signal.c
index 397e5a4b8..17d663844 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -53,6 +53,8 @@
 #include <asm/cacheflush.h>
 #include "audit.h"	/* audit_signal_info() */
 
+#include <linux/rekernel.h>
+
 /*
  * SLAB caches for signal bits.
  */
@@ -1213,12 +1215,66 @@ specific_send_sig_info(int sig, struct siginfo *info, struct task_struct *t)
 	return send_signal(sig, info, t, 0);
 }
 
+static inline bool line_is_frozen(struct task_struct *task)
+{
+	return frozen(task) || freezing(task);
+}
+
+static int send_netlink_message(char *msg, uint16_t len) {
+	struct sk_buff *skbuffer;
+	struct nlmsghdr *nlhdr;
+
+	skbuffer = nlmsg_new(len, GFP_ATOMIC);
+	if (!skbuffer) {
+		printk("netlink alloc failure.\n");
+		return -1;
+	}
+
+	nlhdr = nlmsg_put(skbuffer, 0, 0, rekernel_netlink_unit, len, 0);
+	if (!nlhdr) {
+		printk("nlmsg_put failaure.\n");
+		nlmsg_free(skbuffer);
+		return -1;
+	}
+
+	memcpy(nlmsg_data(nlhdr), msg, len);
+	return netlink_unicast(rekernel_netlink, skbuffer, REKERNEL_USER_PORT, MSG_DONTWAIT);
+}
+
+static int start_rekernel_server(void) {
+	extern struct net init_net;
+	struct netlink_kernel_cfg rekernel_cfg = { 
+		.input = NULL,
+	};
+	if (rekernel_netlink != NULL)
+		return 0;
+	for (rekernel_netlink_unit = NETLINK_REKERNEL_MIN; rekernel_netlink_unit < NETLINK_REKERNEL_MAX; rekernel_netlink_unit++) {
+		rekernel_netlink = (struct sock *)netlink_kernel_create(&init_net, rekernel_netlink_unit, &rekernel_cfg);
+		if (rekernel_netlink != NULL)
+			break;
+	}
+	printk("Created Re:Kernel server! NETLINK UNIT: %d\n", rekernel_netlink_unit);
+	if (rekernel_netlink == NULL) {
+		printk("Failed to create Re:Kernel server!\n");
+		return -1;
+	}
+	return 0;
+}
+
 int do_send_sig_info(int sig, struct siginfo *info, struct task_struct *p,
 			bool group)
 {
 	unsigned long flags;
 	int ret = -ESRCH;
 
+	if (start_rekernel_server() == 0) {
+		if (line_is_frozen(p) && (sig == SIGKILL || sig == SIGTERM || sig == SIGABRT || sig == SIGQUIT)) {
+			char binder_kmsg[REKERNEL_PACKET_SIZE];
+			snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Signal,signal=%d,killer=%d,dst=%d;", sig, task_uid(p).val, task_uid(current).val);
+			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+		}
+	}
+
 	if (lock_task_sighand(p, &flags)) {
 		ret = send_signal(sig, info, p, group);
 		unlock_task_sighand(p, &flags);
-- 
2.43.0

